 The set of files mimics a client (Alice.java) a server and client (Bob.java) and a core server KDC for a shared secret exchange using the Needham Schroeder 
Mediated-Authentication Scheme and TCP socket communication. The program goes through 3 distinct scenarios:
1. Extended NHS protocol, which authenticates both Alice and Bob using a KDC.
2. A successful reflection attack conducted by Trudy, impersonating as Alice, and is authenticated as Alice by Bob in the original NHS protocol that uses CBC encryption.
3. An unsuccessful reflection attack conducted by Trudy, as Bob is using CBC encryption which generates a unique IV specifically to reduce the possibily of a replay attack. 

All three scenarios are printed to the console, in the order provided in the numbered list above, when the three files are compiled and executed as follows:

 To run the programs from a terminal:
 1. Input on command line: $javac Kdc.Java Bob.java Alice.java
 2. Ensure all programs compiled and Kdc.class Bob.class Alice.class are in the current directory.
 3. Open three terminal windows (requires 3 windows, 1 for Kdc, 1 for Bob, the last for Alice).
 4. In the first window, input on the command line: $ java Kdc
 5. In the second window, input on the command line: $ java Bob
 6. In the third window, input on the command line: $ java Alice
 6. All three terminals should have the respective exchange from either party printed in the window.

If running the programs from an IDE, ensure the environment allows for multiple programs to execute at the same time. First, compile and run Kdc, then Bob (in another tab) and finally Alice (again, in another tab).The order of execution matters.

 More detailed information on the program:

The primary encryption scheme uses 3DES, Triple DES encryption, with keys generated using various Java.crypto packages and Java.security for a secure random nonce generator, each none being 64-bit values. 

The main scheme is Alice first connects to Bob, who tells Alice to contact the KDC server. Alice completes the protocol with the KDC, confirming their identity with one another and then generating a shared secret key for Alice and Bob to communicate with. Once Alice finishes with the KDC protocol, she returns to the communication channel with Bob, following through the rest of the protocol by sending Bob's ticket, generated by the KDC, and both Alice and Bob proceed to authenticate one another through two additional nonce exchanges. 

A tricky attribute is that communication with the KDC must also be encrypted, which requires the KDC to have a shared key with both Alice and Bob. In order to maintain a secure channel for all parties involved, I had implemented an initial RSA pair key for both Alice and Bob. When communicating with the KDC, they transmit their public RSA key to the KDC, followed by their encrypted ID number recognized by the KDC. The KDC authenticates the sender of the ID and then accepts the 3DES private key of the respective individual, which is encrypted by their secret RSA key. This should provide enough security for all parties to feel safe in communication.

The implemented reflection attack bypasses the main coding of the extended NHS by piggy-backing off of the executed extended protocol, simply copying the final 3 messages that are sent by Alice and Bob (Trudy had intercepted these messages, including Bob's ticket, which Trudy was able to identify somehow). The original protocol is quite similar to the extended program, so it seemed reasonable to simply assume the exchange between Alice/KDC, Alice/Bob had already taken place, and Trudy attempts to authenticate herself as Alice after Alice/Bob end their communication. The succesfull attack uses simple ECB encryption/decryption, and shows clearly in each session what Trudy/Bob are doing in each step of the protocol (through console print statements).

The final portion of the program shows the failed reflection attack, which again uses nearly identical code as the reflection attack in ECB mode, with a slight change: Bob sends his encrypted message to Trudy using CBC (the message Trudy intercepted from Alice are still technically ECB encrypted, but regardless of this minor detail, Bob's use of CBC encryption is able to thwart Trudy's attempt at a replay attack) and similar to the reflection attack in the second execution of the program, each step of the protocol for both Trudy/Bob are printed to the console. After Bob is able to determine that Trudy isn't genuinely Alice, Bob terminates the program and inside of the Alice terminal, the hexadecimal value of the last two messages in both ECB and CBC mode (which Trudy had received from Bob) are printed to the console. The final results show that Bob's implementation of CBC was warranted and succesfull at combatting the the reflection attack.

As was mentioned earlier, console print statements are made for each class as they execute their respective handshakes with one another, KDC has only a single instance printed to the console, while Alice and Bob each have three instances. Each instance of the protocol for Alice and Bob is titled, they annotate their step in the protocol, and proper spacing helps one easily scan through the various instances observed from each party.