import java.io.Serializable;

public class SSLRecordHeader implements Serializable
{
    // stated protocol version in header
    private byte[] protocolVersion;
    // Record type (byte 0)
    private byte contentType;
    // Length of payload
    private long[] contentLength;

    // Record types
    public static final byte SSL3_RT_CHANGE_CIPHER_SPEC = 0x14;
    public static final int SSL3_RT_ALERT = 0x15;
    public static final int SSL3_RT_HANDSHAKE = 0x16;
    public static final int SSL3_RT_APPLICATION_DATA = 0x17;
    public static final int TLS1_RT_HEARTBEAT = 0x18;

    // Protocol Versions
    public static final byte[] TLS1_1_VERSION = {0x03, 0x01};
    public static final byte[] TLS1_2_VERSION = {0x03, 0x02};
    public static final byte[] TLS1_3_VERSION = {0x03, 0x03};

    // Handshake type values
    public static final byte SSL3_MT_HELLO_REQUEST = 0x00;
    public static final byte SSL3_MT_CLIENT_HELLO = 0x01;
    public static final byte SSL3_MT_SERVER_HELLO = 0x02;
    public static final byte SSL3_MT_NEWSESSION_TICKET = 0x04;
    public static final byte SSL3_MT_CERTIFICATE = 0x0B;
    public static final byte SSL3_MT_SERVER_KEY_EXCHANGE = 0x0C;
    public static final byte SSL3_MT_CERTIFICATE_REQUEST = 0x0D;
    public static final byte SSL3_MT_SERVER_DONE = 0x0E;
    public static final byte SSL3_MT_CERTIFICATE_VERIFY = 0x0F;
    public static final byte SSL3_MT_CLIENT_KEY_EXCHANGE = 0x10;
    public static final byte SSL3_MT_FINISHED = 0x14;

    // Alert values
    public static final byte SSL3_AD_CLOSE_NOTIFY = 0x00;
    public static final byte SSL3_AD_UNEXPECTED_MESSAGE = 0x0A;
    public static final byte SSL3_AD_BAD_RECORD_MAC = 0x14;
    public static final byte TLS1_AD_DECRYPTION_FAILED = 0x15;
    public static final byte TLS1_AD_RECORD_OVERFLOW = 0x16;
    public static final byte SSL3_AD_DECOMPRESSION_FAILURE = 0x1E;
    public static final byte SSL3_AD_HANDSHAKE_FAILURE = 0x28;
    public static final byte SSL3_AD_NO_CERTIFICATE = 0x29;
    public static final byte SSL3_AD_BAD_CERTIFICATE = 0x2A;
    public static final byte SSL3_AD_UNSUPPORTED_CERTIFICATE = 0x2B;
    public static final byte SSL3_AD_CERTIFICATE_REVOKED = 0x2C;
    public static final byte SSL3_AD_CERTIFICATE_EXPIRED = 0x2D;
    public static final byte SSL3_AD_CERTIFICATE_UNKNOWN = 0x2E;
    public static final byte SSL3_AD_ILLEGAL_PARAMETER = 0x2F;
    public static final byte TLS1_AD_UNKNOWN_CA = 0x30;
    public static final byte TLS1_AD_ACCESS_DENIED = 0x31;
    public static final byte TLS1_AD_DECODE_ERROR = 0x32;
    public static final byte TLS1_AD_DECRYPT_ERROR = 0x33;
    public static final byte TLS1_AD_EXPORT_RESTRICTION = 0x3C;
    public static final byte TLS1_AD_PROTOCOL_VERSION = 0x46;
    public static final byte TLS1_AD_INSUFFICIENT_SECURITY = 0x47;
    public static final byte TLS1_AD_INTERNAL_ERROR = 0x50;
    public static final byte TLS1_AD_USER_CANCELLED = 0x5A;
    public static final byte TLS1_AD_NO_RENEGOTIATION = 0x64;
    public static final byte TLS1_AD_UNSUPPORTED_EXTENSION = 0x6E;
    public static final byte TLS1_AD_CERTIFICATE_UNOBTAINABLE = 0x6F;
    public static final byte TLS1_AD_UNRECOGNIZED_NAME = 0x70;
    public static final byte TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 0x71;
    public static final byte TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = 0x72;
    public static final byte TLS1_AD_UNKNOWN_PSK_IDENTITY = 0x73;

    public SSLRecordHeader(byte[] protocolVersion, byte contentType, long[] contentLength)
    {
        this.protocolVersion = protocolVersion;
        this.contentType = contentType;
        this.contentLength = contentLength;
    }

    public byte[] getProtocolVersion()
    {
        return protocolVersion;
    }

    public byte getContentType()
    {
        return contentType;
    }

    public long[] getContentLength()
    {
        return contentLength;
    }

    public void printHeader()
    {
        System.out.print("Protocol version: ");
        for (byte b : this.protocolVersion)
        {
            System.out.print(b + " ");
        }
        System.out.println();
        System.out.println("Content type: " + this.contentType);
        System.out.print("Content length: ");
        for (long l : this.contentLength)
        {
            System.out.print(l + " ");
        }
        System.out.println();
    }
}
